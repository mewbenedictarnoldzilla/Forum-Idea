<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Science Stuff</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #000000;
        }

        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header h1 {
            color: white;
            font-size: 2rem;
            font-weight: bold;
        }

        .header-buttons {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: #4CAF50;
            color: white;
        }

        .btn-secondary {
            background: #2196F3;
            color: white;
        }

        .btn-danger {
            background: #f44336;
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .main-container {
            display: flex;
            min-height: calc(100vh - 80px);
        }

        .sidebar {
            width: 250px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 2rem 1rem;
            border-right: 1px solid rgba(255, 255, 255, 0.2);
        }

        .sidebar h3 {
            color: white;
            margin-bottom: 1rem;
            font-size: 1.2rem;
        }

        .repository-item {
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .repository-item:hover {
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .biology { background-color: #d1f2d0; }
        .chemistry { background-color: #abeaff; }
        .physics { background-color: #ffb5b5; }

        .content-area {
            flex: 1;
            padding: 2rem;
            overflow-y: auto;
        }

        .repository-view {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            min-height: 500px;
        }

        .repository-view h2 {
            font-size: 2rem;
            margin-bottom: 1rem;
        }

        .repository-view h3 {
            font-size: 1.5rem;
            margin: 1.5rem 0 1rem 0;
        }

        .repository-view h4 {
            font-size: 1.2rem;
            margin: 1rem 0 0.5rem 0;
        }

        .post {
            background: rgba(255, 255, 255, 0.8);
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            border-left: 4px solid #4CAF50;
        }

        .post-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .user-rank {
            font-size: 0.8rem;
            padding: 0.2rem 0.5rem;
            border-radius: 15px;
            font-weight: bold;
        }

        .rank-founder { background: #FFD700; color: #000; }
        .rank-admin { background: #FF6B6B; color: white; }
        .rank-member { background: #4ECDC4; color: white; }
        .rank-viewer { background: #95A5A6; color: white; }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 2rem;
            border-radius: 15px;
            width: 90%;
            max-width: 500px;
            position: relative;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            position: absolute;
            right: 1rem;
            top: 1rem;
        }

        .close:hover {
            color: black;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .form-group input, .form-group textarea, .form-group select {
            width: 100%;
            padding: 0.8rem;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
        }

        .form-group textarea {
            min-height: 120px;
            resize: vertical;
        }

        .animation-canvas {
            width: 100%;
            height: 400px;
            border: 2px solid #ddd;
            border-radius: 10px;
            background: white;
            position: relative;
            overflow: hidden;
        }

        .animation-controls {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }

        .ai-assistant {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 60px;
            height: 60px;
            background: #4CAF50;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
            z-index: 500;
        }

        .ai-assistant:hover {
            transform: scale(1.1);
        }

        .ai-chat {
            position: fixed;
            bottom: 90px;
            right: 20px;
            width: 350px;
            height: 400px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            display: none;
            flex-direction: column;
            z-index: 500;
        }

        .ai-chat-header {
            background: #4CAF50;
            color: white;
            padding: 1rem;
            border-radius: 15px 15px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .ai-chat-messages {
            flex: 1;
            padding: 1rem;
            overflow-y: auto;
            max-height: 280px;
        }

        .ai-chat-input {
            padding: 1rem;
            border-top: 1px solid #eee;
            display: flex;
            gap: 0.5rem;
        }

        .ai-chat-input input {
            flex: 1;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 20px;
        }

        .message {
            margin-bottom: 1rem;
            padding: 0.5rem 1rem;
            border-radius: 15px;
            max-width: 80%;
        }

        .message.user {
            background: #e3f2fd;
            margin-left: auto;
        }

        .message.ai {
            background: #f1f8e9;
        }

        .complaint-section {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1rem;
            border-radius: 10px;
            margin-top: 2rem;
            text-align: center;
        }

        .complaint-section h4 {
            color: white;
            margin-bottom: 1rem;
        }

        .email-copy {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            font-family: monospace;
            margin: 0.5rem 0;
        }

        .hidden { display: none; }
        .visible { display: block; }

        @media (max-width: 768px) {
            .main-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                padding: 1rem;
            }
            
            .header {
                padding: 1rem;
                flex-direction: column;
                gap: 1rem;
            }
            
            .ai-chat {
                width: calc(100% - 40px);
                right: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Science Stuff</h1>
        <div class="header-buttons">
            <button class="btn btn-primary" onclick="showCreateRepository()">+ Create Repository</button>
            <button class="btn btn-secondary" onclick="showAnimationTool()">Animation Tool</button>
            <button class="btn btn-secondary" id="authBtn" onclick="showAuth()">Sign In</button>
            <span id="userInfo" class="hidden"></span>
        </div>
    </div>

    <div class="main-container">
        <div class="sidebar">
            <h3>Main Repositories</h3>
            <div class="repository-item biology" onclick="showRepository('biology')">
                <strong>Biology</strong>
                <p>Life sciences and organisms</p>
            </div>
            <div class="repository-item chemistry" onclick="showRepository('chemistry')">
                <strong>Chemistry</strong>
                <p>Matter and molecular interactions</p>
            </div>
            <div class="repository-item physics" onclick="showRepository('physics')">
                <strong>Physics</strong>
                <p>Energy, motion, and forces</p>
            </div>

            <div class="complaint-section">
                <h4>Need Help?</h4>
                <button class="btn btn-danger" onclick="fileComplaint()">File a Complaint</button>
                <button class="btn btn-secondary" onclick="copyEmail()" style="font-size: 0.8rem; padding: 0.3rem 0.6rem; margin-top: 0.5rem;">Copy Email Address</button>
                <div class="email-copy">mewbenedictarnoldzilla@gmail.com</div>
            </div>
        </div>

        <div class="content-area">
            <div id="welcomeView" class="repository-view">
                <h2>Welcome to Science Stuff!</h2>
                <h3>Your collaborative science forum</h3>
                <p>Select a repository from the sidebar to get started, or create your own content using the tools above.</p>
                
                <h4>User Ranks:</h4>
                <div style="display: flex; gap: 1rem; flex-wrap: wrap; margin: 1rem 0;">
                    <span class="user-rank rank-founder">FOUNDER</span>
                    <span class="user-rank rank-admin">ADMIN/OP</span>
                    <span class="user-rank rank-member">MEMBER</span>
                    <span class="user-rank rank-viewer">VIEWER</span>
                </div>
                
                <h4>Features:</h4>
                <ul style="margin: 1rem 0; padding-left: 2rem;">
                    <li>Create and share repositories</li>
                    <li>Interactive animation tools</li>
                    <li>AI assistant powered by Claude Sonnet 4</li>
                    <li>Comment and collaborate on posts</li>
                    <li>Moderated content for safety</li>
                </ul>
            </div>

            <div id="repositoryView" class="repository-view hidden">
                <div id="repositoryContent"></div>
            </div>
        </div>
    </div>

    <!-- Authentication Modal -->
    <div id="authModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('authModal')">&times;</span>
            <h2 id="authTitle">Sign In</h2>
            <form id="authForm">
                <div class="form-group">
                    <label for="authEmail">Email or Username:</label>
                    <input type="text" id="authEmail" required>
                </div>
                <div class="form-group">
                    <label for="authPassword">Password:</label>
                    <input type="password" id="authPassword" required>
                </div>
                <div class="form-group" id="confirmPasswordGroup" style="display: none;">
                    <label for="confirmPassword">Confirm Password:</label>
                    <input type="password" id="confirmPassword">
                </div>
                <button type="submit" class="btn btn-primary" style="width: 100%;">Sign In</button>
                <button type="button" class="btn btn-secondary" onclick="toggleAuthMode()" style="width: 100%; margin-top: 0.5rem;" id="toggleAuthBtn">Need an account? Sign Up</button>
                <button type="button" class="btn btn-secondary" onclick="signInWithGoogle()" style="width: 100%; margin-top: 0.5rem;">Sign in with Google</button>
            </form>
        </div>
    </div>

    <!-- Create Repository Modal -->
    <div id="createRepoModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('createRepoModal')">&times;</span>
            <h2>Create New Repository</h2>
            <form id="createRepoForm">
                <div class="form-group">
                    <label for="repoTitle">Title:</label>
                    <input type="text" id="repoTitle" required>
                </div>
                <div class="form-group">
                    <label for="repoCategory">Category:</label>
                    <select id="repoCategory" required>
                        <option value="">Select Category</option>
                        <option value="biology">Biology</option>
                        <option value="chemistry">Chemistry</option>
                        <option value="physics">Physics</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="repoDescription">Description:</label>
                    <textarea id="repoDescription" required></textarea>
                </div>
                <div class="form-group">
                    <label for="repoImage">Image URL (optional):</label>
                    <input type="url" id="repoImage">
                </div>
                <div class="form-group">
                    <label for="textColor">Text Color:</label>
                    <input type="color" id="textColor" value="#000000">
                </div>
                <button type="submit" class="btn btn-primary" style="width: 100%;">Create Repository</button>
            </form>
        </div>
    </div>

    <!-- Animation Tool Modal -->
    <div id="animationModal" class="modal">
        <div class="modal-content" style="max-width: 800px; width: 95%;">
            <span class="close" onclick="closeModal('animationModal')">&times;</span>
            <h2>Animation Tool</h2>
            <div class="animation-canvas" id="animationCanvas"></div>
            <div class="animation-controls">
                <button class="btn btn-primary" onclick="addPolygon()">Add Polygon</button>
                <input type="number" id="polygonSides" placeholder="Sides" value="3" min="3" max="20">
                <button class="btn btn-secondary" onclick="playAnimation()">Play</button>
                <button class="btn btn-secondary" onclick="pauseAnimation()">Pause</button>
                <button class="btn btn-secondary" onclick="saveAnimation()">Save</button>
                <button class="btn btn-primary" onclick="shareAnimation()" style="margin-left: auto;">Share/Send</button>
            </div>
            <div class="form-group" style="margin-top: 1rem;">
                <label for="connectionColor">Connection Point Color:</label>
                <input type="color" id="connectionColor" value="#ff0000">
            </div>
        </div>
    </div>

    <!-- AI Assistant -->
    <div class="ai-assistant" onclick="toggleAIChat()">
        <svg width="30" height="30" fill="white" viewBox="0 0 24 24">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
        </svg>
    </div>

    <div class="ai-chat" id="aiChat">
        <div class="ai-chat-header">
            <span>Claude Sonnet 4 Assistant</span>
            <span onclick="toggleAIChat()" style="cursor: pointer;">&times;</span>
        </div>
        <div class="ai-chat-messages" id="aiMessages">
            <div class="message ai">Hello! I'm your AI assistant. How can I help you with science today?</div>
        </div>
        <div class="ai-chat-input">
            <input type="text" id="aiInput" placeholder="Ask me anything about science..." onkeypress="handleAIInput(event)">
            <button class="btn btn-primary" onclick="sendAIMessage()">Send</button>
        </div>
    </div>

    <script>
        // Global state
        let currentUser = null;
        let currentRepository = null;
        let repositories = {
            biology: { posts: [], color: '#d1f2d0' },
            chemistry: { posts: [], color: '#abeaff' },
            physics: { posts: [], color: '#ffb5b5' }
        };
        let userRepositories = [];
        let animationData = [];
        let isAnimationPlaying = false;

        // Authentication
        function showAuth() {
            document.getElementById('authModal').style.display = 'block';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        function toggleAuthMode() {
            const title = document.getElementById('authTitle');
            const toggleBtn = document.getElementById('toggleAuthBtn');
            const confirmGroup = document.getElementById('confirmPasswordGroup');
            
            if (title.textContent === 'Sign In') {
                title.textContent = 'Sign Up';
                toggleBtn.textContent = 'Already have an account? Sign In';
                confirmGroup.style.display = 'block';
            } else {
                title.textContent = 'Sign In';
                toggleBtn.textContent = 'Need an account? Sign Up';
                confirmGroup.style.display = 'none';
            }
        }

        function signInWithGoogle() {
            // Simulate Google sign-in
            currentUser = {
                username: 'GoogleUser' + Math.floor(Math.random() * 1000),
                email: 'user@gmail.com',
                rank: 'member'
            };
            updateUserUI();
            closeModal('authModal');
        }

        document.getElementById('authForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const email = document.getElementById('authEmail').value;
            const password = document.getElementById('authPassword').value;
            
            // Simulate authentication
            currentUser = {
                username: email.split('@')[0] || email,
                email: email,
                rank: email === 'mewbenedictarnoldzilla@gmail.com' ? 'founder' : 'member'
            };
            
            updateUserUI();
            closeModal('authModal');
        });

        function updateUserUI() {
            const authBtn = document.getElementById('authBtn');
            const userInfo = document.getElementById('userInfo');
            
            if (currentUser) {
                authBtn.style.display = 'none';
                userInfo.className = 'visible';
                userInfo.innerHTML = `
                    <span class="user-rank rank-${currentUser.rank}">${currentUser.rank.toUpperCase()}</span>
                    <span style="color: white; margin: 0 1rem;">${currentUser.username}</span>
                    <button class="btn btn-danger" onclick="signOut()">Sign Out</button>
                `;
            } else {
                authBtn.style.display = 'block';
                userInfo.className = 'hidden';
            }
        }

        function signOut() {
            currentUser = null;
            updateUserUI();
        }

        // Repository Management
        function showRepository(category) {
            currentRepository = category;
            const repositoryView = document.getElementById('repositoryView');
            const welcomeView = document.getElementById('welcomeView');
            const content = document.getElementById('repositoryContent');
            
            welcomeView.className = 'repository-view hidden';
            repositoryView.className = 'repository-view visible';
            repositoryView.style.backgroundColor = repositories[category].color;
            
            content.innerHTML = `
                <h2>${category.charAt(0).toUpperCase() + category.slice(1)} Repository</h2>
                <div style="margin: 2rem 0;">
                    <button class="btn btn-primary" onclick="createPost('${category}')">Create Post</button>
                    <button class="btn btn-secondary" onclick="forkRepository('${category}')">Fork Repository</button>
                </div>
                <div id="posts-${category}">
                    ${renderPosts(category)}
                </div>
            `;
        }

        function renderPosts(category) {
            const posts = repositories[category].posts;
            if (posts.length === 0) {
                return '<p>No posts yet. Be the first to contribute!</p>';
            }
            
            return posts.map(post => `
                <div class="post">
                    <div class="post-header">
                        <div>
                            <strong>${post.title}</strong>
                            <span class="user-rank rank-${post.author.rank}">${post.author.rank.toUpperCase()}</span>
                            <span style="margin-left: 1rem;">by ${post.author.username}</span>
                        </div>
                        <small>${post.date}</small>
                    </div>
                    <p>${post.content}</p>
                    ${post.image ? `<img src="${post.image}" alt="Post image" style="max-width: 100%; margin-top: 1rem; border-radius: 8px;">` : ''}
                    <div style="margin-top: 1rem;">
                        <button class="btn btn-secondary" onclick="commentOnPost('${post.id}')">Comment</button>
                        <button class="btn btn-secondary" onclick="sharePost('${post.id}')">Share</button>
                    </div>
                </div>
            `).join('');
        }

        function createPost(category) {
            if (!currentUser) {
                alert('Please sign in to create posts.');
                showAuth();
                return;
            }
            
            if (currentUser.rank === 'viewer') {
                alert('Viewers cannot create posts. Contact an administrator if this is an error.');
                return;
            }
            
            const title = prompt('Enter post title:');
            const content = prompt('Enter post content:');
            const imageUrl = prompt('Enter image URL (optional):');
            
            if (title && content) {
                const post = {
                    id: Date.now().toString(),
                    title: title,
                    content: content,
                    image: imageUrl || null,
                    author: currentUser,
                    date: new Date().toLocaleDateString(),
                    category: category
                };
                
                repositories[category].posts.push(post);
                showRepository(category);
            }
        }

        function forkRepository(category) {
            if (!currentUser) {
                alert('Please sign in to fork repositories.');
                showAuth();
                return;
            }
            
            alert(`Repository ${category} forked to your account!`);
        }

        function commentOnPost(postId) {
            if (!currentUser) {
                alert('Please sign in to comment.');
                showAuth();
                return;
            }
            
            const comment = prompt('Enter your comment:');
            if (comment) {
                alert('Comment submitted for moderation.');
            }
        }

        function sharePost(postId) {
            if (navigator.share) {
                navigator.share({
                    title: 'Science Stuff Post',
                    text: 'Check out this interesting science post!',
                    url: window.location.href
                });
            } else {
                alert('Link copied to clipboard!');
            }
        }

        // Create Repository
        function showCreateRepository() {
            if (!currentUser) {
                alert('Please sign in to create repositories.');
                showAuth();
                return;
            }
            
            document.getElementById('createRepoModal').style.display = 'block';
        }

        document.getElementById('createRepoForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const title = document.getElementById('repoTitle').value;
            const category = document.getElementById('repoCategory').value;
            const description = document.getElementById('repoDescription').value;
            const image = document.getElementById('repoImage').value;
            const textColor = document.getElementById('textColor').value;
            
            // Check if text color is too similar to background
            const bgColor = repositories[category].color;
            if (textColor === bgColor) {
                alert('Text color cannot be the same as background color.');
                return;
            }
            
            const repo = {
                id: Date.now().toString(),
                title: title,
                category: category,
                description: description,
                image: image,
                textColor: textColor,
                author: currentUser,
                status: 'pending_approval'
            };
            
            userRepositories.push(repo);
            alert('Repository submitted for approval!');
            closeModal('createRepoModal');
        });

        // Animation Tool
        function showAnimationTool() {
            document.getElementById('animationModal').style.display = 'block';
            initializeAnimationCanvas();
        }

        function initializeAnimationCanvas() {
            const canvas = document.getElementById('animationCanvas');
            canvas.innerHTML = '<p style="text-align: center; padding: 2rem; color: #666;">Click "Add Polygon" to start creating your animation!</p>';
        }

        function addPolygon() {
            const sides = parseInt(document.getElementById('polygonSides').value) || 3;
            const canvas = document.getElementById('animationCanvas');
            
            if (canvas.children.length === 1 && canvas.children[0].tagName === 'P') {
                canvas.innerHTML = '';
            }
            
            const polygon = document.createElement('div');
            polygon.style.position = 'absolute';
            polygon.style.width = '60px';
            polygon.style.height = '60px';
            polygon.style.background = 'rgba(74, 144, 226, 0.7)';
            polygon.style.border = '2px solid #4a90e2';
            polygon.style.borderRadius = sides > 8 ? '50%' : '10px';
            polygon.style.left = Math.random() * (canvas.clientWidth - 60) + 'px';
            polygon.style.top = Math.random() * (canvas.clientHeight - 60) + 'px';
            polygon.style.cursor = 'move';
            polygon.setAttribute('data-sides', sides);
            
            // Add connection points
            for (let i = 0; i < sides; i++) {
                const point = document.createElement('div');
                point.style.position = 'absolute';
                point.style.width = '8px';
                point.style.height = '8px';
                point.style.background = 'transparent';
                point.style.border = '2px solid ' + document.getElementById('connectionColor').value;
                point.style.borderRadius = '50%';
                point.style.left = (Math.cos(2 * Math.PI * i / sides) * 25 + 25) + 'px';
                point.style.top = (Math.sin(2 * Math.PI * i / sides) * 25 + 25) + 'px';
                point.style.cursor = 'pointer';
                polygon.appendChild(point);
            }
            
            makeDraggable(polygon);
            canvas.appendChild(polygon);
        }

        function makeDraggable(element) {
            let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
            
            element.onmousedown = dragMouseDown;
            
            function dragMouseDown(e) {
                e = e || window.event;
                e.preventDefault();
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragElement;
                document.onmousemove = elementDrag;
            }
            
            function elementDrag(e) {
                e = e || window.event;
                e.preventDefault();
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                element.style.top = (element.offsetTop - pos2) + "px";
                element.style.left = (element.offsetLeft - pos1) + "px";
            }
            
            function closeDragElement() {
                document.onmouseup = null;
                document.onmousemove = null;
            }
        }

        function playAnimation() {
            if (isAnimationPlaying) return;
            
            isAnimationPlaying = true;
            const canvas = document.getElementById('animationCanvas');
            const polygons = canvas.children;
            
            const animatePolygons = () => {
                if (!isAnimationPlaying) return;
                
                for (let polygon of polygons) {
                    if (polygon.tagName === 'DIV' && polygon.hasAttribute('data-sides')) {
                        const currentRotation = parseInt(polygon.style.transform.replace(/[^\d-]/g, '')) || 0;
                        polygon.style.transform = `rotate(${currentRotation + 2}deg)`;
                        
                        // Move polygon slightly
                        const currentLeft = parseInt(polygon.style.left) || 0;
                        const currentTop = parseInt(polygon.style.top) || 0;
                        const newLeft = currentLeft + Math.sin(Date.now() * 0.001) * 0.5;
                        const newTop = currentTop + Math.cos(Date.now() * 0.001) * 0.5;
                        
                        polygon.style.left = Math.max(0, Math.min(canvas.clientWidth - 60, newLeft)) + 'px';
                        polygon.style.top = Math.max(0, Math.min(canvas.clientHeight - 60, newTop)) + 'px';
                    }
                }
                
                requestAnimationFrame(animatePolygons);
            };
            
            animatePolygons();
        }

        function pauseAnimation() {
            isAnimationPlaying = false;
        }

        function saveAnimation() {
            if (!currentUser) {
                alert('Please sign in to save animations.');
                showAuth();
                return;
            }
            
            const canvas = document.getElementById('animationCanvas');
            const animationState = {
                id: Date.now().toString(),
                polygons: Array.from(canvas.children).map(polygon => ({
                    sides: polygon.getAttribute('data-sides'),
                    left: polygon.style.left,
                    top: polygon.style.top,
                    transform: polygon.style.transform
                })),
                timestamp: new Date().toISOString()
            };
            
            // Save to user's account (simulated)
            const savedAnimations = JSON.parse(localStorage.getItem('savedAnimations') || '[]');
            savedAnimations.push(animationState);
            localStorage.setItem('savedAnimations', JSON.stringify(savedAnimations));
            
            alert('Animation saved to your account!');
        }

        function shareAnimation() {
            const canvas = document.getElementById('animationCanvas');
            if (canvas.children.length === 0 || (canvas.children.length === 1 && canvas.children[0].tagName === 'P')) {
                alert('Create some polygons first!');
                return;
            }
            
            if (navigator.share) {
                navigator.share({
                    title: 'My Science Animation',
                    text: 'Check out this cool animation I made!',
                    url: window.location.href
                });
            } else {
                alert('Animation link copied to clipboard!');
            }
        }

        // AI Assistant
        function toggleAIChat() {
            const aiChat = document.getElementById('aiChat');
            aiChat.style.display = aiChat.style.display === 'flex' ? 'none' : 'flex';
        }

        function handleAIInput(event) {
            if (event.key === 'Enter') {
                sendAIMessage();
            }
        }

        function sendAIMessage() {
            const input = document.getElementById('aiInput');
            const message = input.value.trim();
            
            if (!message) return;
            
            const messagesContainer = document.getElementById('aiMessages');
            
            // Add user message
            const userMessage = document.createElement('div');
            userMessage.className = 'message user';
            userMessage.textContent = message;
            messagesContainer.appendChild(userMessage);
            
            // Clear input
            input.value = '';
            
            // Simulate AI response
            setTimeout(() => {
                const aiMessage = document.createElement('div');
                aiMessage.className = 'message ai';
                aiMessage.textContent = generateAIResponse(message);
                messagesContainer.appendChild(aiMessage);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }, 1000);
            
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function generateAIResponse(userMessage) {
            const responses = {
                biology: [
                    "That's a fascinating biology question! In living organisms, cells are the basic units of life and contain specialized organelles that perform specific functions.",
                    "Biology is amazing! Did you know that DNA contains the genetic instructions for all living things? Each species has unique genetic markers.",
                    "Great biology topic! The process of photosynthesis converts light energy into chemical energy, which is fundamental to most life on Earth."
                ],
                chemistry: [
                    "Excellent chemistry question! Chemical bonds form when atoms share or transfer electrons, creating stable molecular structures.",
                    "Chemistry is all about interactions! The periodic table organizes elements by their atomic structure and helps predict chemical behavior.",
                    "Interesting chemistry concept! Chemical reactions involve breaking and forming bonds, often releasing or absorbing energy in the process."
                ],
                physics: [
                    "Great physics question! Newton's laws describe how objects move and interact, forming the foundation of classical mechanics.",
                    "Physics explains the universe! Energy can neither be created nor destroyed, only transformed from one form to another.",
                    "Fascinating physics topic! Quantum mechanics reveals that particles can exist in multiple states simultaneously until observed."
                ],
                general: [
                    "That's an interesting question! I'd be happy to help you explore this scientific concept further.",
                    "Science is full of wonder! Let me help you understand this topic better with some examples and explanations.",
                    "Great question! Scientific thinking involves observation, hypothesis formation, and testing through experimentation."
                ]
            };
            
            const category = currentRepository || 'general';
            const categoryResponses = responses[category] || responses.general;
            
            return categoryResponses[Math.floor(Math.random() * categoryResponses.length)];
        }

        // Complaint System
        function fileComplaint() {
            const subject = encodeURIComponent('Science Stuff Forum Complaint');
            const body = encodeURIComponent('Dear mewbenedictarnoldzilla,\n\nI would like to file a complaint regarding:\n\n[Please describe your issue here]\n\nThank you for your time.\n\nBest regards,\n' + (currentUser ? currentUser.username : 'Anonymous User'));
            
            window.open(`mailto:mewbenedictarnoldzilla@gmail.com?subject=${subject}&body=${body}`, '_blank');
        }

        function copyEmail() {
            const email = 'mewbenedictarnoldzilla@gmail.com';
            
            if (navigator.clipboard) {
                navigator.clipboard.writeText(email).then(() => {
                    alert('Email address copied to clipboard!');
                });
            } else {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = email;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                alert('Email address copied to clipboard!');
            }
        }

        // Initialize default content
        function initializeDefaultContent() {
            // Add some sample posts
            repositories.biology.posts.push({
                id: '1',
                title: 'Cell Structure and Function',
                content: 'Exploring the fascinating world of cellular biology and how organelles work together to maintain life processes.',
                author: { username: 'BiologyExpert', rank: 'admin' },
                date: '2025-05-20',
                category: 'biology'
            });

            repositories.chemistry.posts.push({
                id: '2',
                title: 'Chemical Bonding Fundamentals',
                content: 'Understanding ionic, covalent, and metallic bonds - the forces that hold matter together.',
                author: { username: 'ChemProfessor', rank: 'member' },
                date: '2025-05-22',
                category: 'chemistry'
            });

            repositories.physics.posts.push({
                id: '3',
                title: 'Quantum Mechanics Simplified',
                content: 'Breaking down complex quantum concepts into understandable principles for students and enthusiasts.',
                author: { username: 'PhysicsGuru', rank: 'admin' },
                date: '2025-05-25',
                category: 'physics'
            });
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', function() {
            initializeDefaultContent();
            
            // Close modals when clicking outside
            window.onclick = function(event) {
                const modals = document.querySelectorAll('.modal');
                modals.forEach(modal => {
                    if (event.target === modal) {
                        modal.style.display = 'none';
                    }
                });
            };
            
            // Update connection point colors when color changes
            document.getElementById('connectionColor').addEventListener('change', function() {
                const canvas = document.getElementById('animationCanvas');
                const points = canvas.querySelectorAll('div[style*="border"]');
                points.forEach(point => {
                    if (point.style.border.includes('2px solid')) {
                        point.style.border = '2px solid ' + this.value;
                    }
                });
            });
        });

        // Prevent form submission on Enter key in search/input fields
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && e.target.tagName !== 'TEXTAREA' && e.target.id !== 'aiInput') {
                if (e.target.closest('form')) {
                    // Allow form submission
                    return;
                }
                e.preventDefault();
            }
        });

        // Auto-save animation progress every 30 seconds
        setInterval(function() {
            if (currentUser && document.getElementById('animationModal').style.display === 'block') {
                const canvas = document.getElementById('animationCanvas');
                if (canvas.children.length > 0) {
                    // Auto-save animation state
                    console.log('Auto-saving animation progress...');
                }
            }
        }, 30000);

        // Simulate content moderation
        function simulateContentModeration(content) {
            const bannedWords = ['spam', 'inappropriate', 'harmful'];
            const lowerContent = content.toLowerCase();
            
            return !bannedWords.some(word => lowerContent.includes(word));
        }

        // User strike system
        let userStrikes = {};

        function addStrike(username) {
            if (!userStrikes[username]) {
                userStrikes[username] = 0;
            }
            
            userStrikes[username]++;
            
            if (userStrikes[username] >= 3) {
                alert(`User ${username} has been banned for repeated violations. They may appeal at mewbenedictarnoldzilla@gmail.com`);
                // In a real system, this would ban the user
                return true; // User is banned
            }
            
            alert(`Warning: Strike ${userStrikes[username]}/3 for inappropriate content.`);
            return false; // User not banned yet
        }

        // Simulated Google Authentication
        function simulateGoogleAuth() {
            return new Promise((resolve) => {
                setTimeout(() => {
                    resolve({
                        username: 'GoogleUser' + Math.floor(Math.random() * 1000),
                        email: 'user@gmail.com',
                        rank: 'member'
                    });
                }, 1000);
            });
        }

        console.log('Science Stuff Forum initialized successfully!');
    </script>
</body>
</html>
                
